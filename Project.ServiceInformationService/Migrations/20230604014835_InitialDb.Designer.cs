// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.ServiceInformationService.Data.Configurations;

#nullable disable

namespace Project.ServiceInformationService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230604014835_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project.ServiceInformationService.Data.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecializationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceID");

                    b.HasIndex("SpecializationID");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.ServicePackage", b =>
                {
                    b.Property<Guid>("ServicePackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("PriceDiscount")
                        .HasColumnType("float");

                    b.Property<string>("ServicePackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ServicePackageID");

                    b.ToTable("ServicePackage", (string)null);
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.ServicePackageItem", b =>
                {
                    b.Property<Guid>("ServicePackageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServicePackageID", "ServiceID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServicePackageItem", (string)null);
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.Specialization", b =>
                {
                    b.Property<Guid>("SpecializationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecializationID");

                    b.ToTable("Specialization", (string)null);
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.Service", b =>
                {
                    b.HasOne("Project.ServiceInformationService.Data.Specialization", "Specialization")
                        .WithMany("Services")
                        .HasForeignKey("SpecializationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Specialization_One_To_Many_Service");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.ServicePackageItem", b =>
                {
                    b.HasOne("Project.ServiceInformationService.Data.Service", "Service")
                        .WithMany("ServicePackageItems")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Service_One_To_Many_ServicePackageItem");

                    b.HasOne("Project.ServiceInformationService.Data.ServicePackage", "ServicePackage")
                        .WithMany("ServicePackageItems")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_ServicePackage_One_To_Many_ServicePackageItem");

                    b.Navigation("Service");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.Service", b =>
                {
                    b.Navigation("ServicePackageItems");
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.ServicePackage", b =>
                {
                    b.Navigation("ServicePackageItems");
                });

            modelBuilder.Entity("Project.ServiceInformationService.Data.Specialization", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
