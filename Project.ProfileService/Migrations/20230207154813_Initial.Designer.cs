// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.ProfileService.Data.Configurations;

#nullable disable

namespace Project.ProfileService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230207154813_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project.ProfileService.Data.DoctorProfile", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quality")
                        .HasColumnType("real");

                    b.Property<Guid>("SpecializationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkStart")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.ToTable("DoctorProfiles", (string)null);
                });

            modelBuilder.Entity("Project.ProfileService.Data.FamilyProfile", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID", "PatientID");

                    b.HasIndex("PatientID");

                    b.ToTable("FamilyProfiles", (string)null);
                });

            modelBuilder.Entity("Project.ProfileService.Data.PatientProfile", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("UserID");

                    b.ToTable("PatientProfiles", (string)null);
                });

            modelBuilder.Entity("Project.ProfileService.Data.Profile", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("Project.ProfileService.Data.SupporterProfile", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkStart")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.ToTable("SupporterProfiles", (string)null);
                });

            modelBuilder.Entity("Project.ProfileService.Data.DoctorProfile", b =>
                {
                    b.HasOne("Project.ProfileService.Data.Profile", "Profile")
                        .WithOne("DoctorProfile")
                        .HasForeignKey("Project.ProfileService.Data.DoctorProfile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_DoctorProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Project.ProfileService.Data.FamilyProfile", b =>
                {
                    b.HasOne("Project.ProfileService.Data.Profile", "OtherProfile")
                        .WithMany("FamilyRelationshipProfile")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project.ProfileService.Data.Profile", "MyProfile")
                        .WithMany("FamilyProfile")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MyProfile");

                    b.Navigation("OtherProfile");
                });

            modelBuilder.Entity("Project.ProfileService.Data.PatientProfile", b =>
                {
                    b.HasOne("Project.ProfileService.Data.Profile", "Profile")
                        .WithOne("PatientProfile")
                        .HasForeignKey("Project.ProfileService.Data.PatientProfile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_PatientProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Project.ProfileService.Data.SupporterProfile", b =>
                {
                    b.HasOne("Project.ProfileService.Data.Profile", "Profile")
                        .WithOne("SupporterProfile")
                        .HasForeignKey("Project.ProfileService.Data.SupporterProfile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_SupporterProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Project.ProfileService.Data.Profile", b =>
                {
                    b.Navigation("DoctorProfile");

                    b.Navigation("FamilyProfile");

                    b.Navigation("FamilyRelationshipProfile");

                    b.Navigation("PatientProfile");

                    b.Navigation("SupporterProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
